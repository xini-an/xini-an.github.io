<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>EDA</title>
    <link href="/uncategorized/EDA/"/>
    <url>/uncategorized/EDA/</url>
    
    <content type="html"><![CDATA[<h1 id="EDA代码题"><a href="#EDA代码题" class="headerlink" title="EDA代码题"></a>EDA代码题</h1><h3 id="1-用verilog-HDL语言编写下图电路的实现程序"><a href="#1-用verilog-HDL语言编写下图电路的实现程序" class="headerlink" title="1.用verilog HDL语言编写下图电路的实现程序"></a>1.用verilog HDL语言编写下图电路的实现程序</h3><p><img src="/img/typora-user-images/image-20230203195639691.png"></p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">module one(D, S, Y);<br>input wire [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] D;<br>input wire [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] S;<br>output Y;<br>assign Y= D0 &amp; (~S1) &amp; (~S0) |<br>      D1 &amp; (S1) &amp; S0 |<br>      D2 &amp; S1 &amp; (~S0) |<br>      D3 &amp; S1 &amp; S0;<br>endmodule;<br></code></pre></td></tr></table></figure><h3 id="2-用verilog-HDL语言编写下图电路的实现程序"><a href="#2-用verilog-HDL语言编写下图电路的实现程序" class="headerlink" title="2. 用verilog HDL语言编写下图电路的实现程序"></a>2. 用verilog HDL语言编写下图电路的实现程序</h3><p><img src="/img/typora-user-images/image-20230203201755683.png"></p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">module two (A, B, G, S, E);<br>input A, B;<br>output G, S, E;<br>assign G = A &amp; (~B);<br>assign E = ~ (A ^ B);<br>assign E = ~ (A &amp; (~B) | (~ (A^B)) );<br>endmodule;<br></code></pre></td></tr></table></figure><h3 id="3-用verilog-HDL语言编写下图电路的实现程序"><a href="#3-用verilog-HDL语言编写下图电路的实现程序" class="headerlink" title="3. 用verilog HDL语言编写下图电路的实现程序"></a>3. 用verilog HDL语言编写下图电路的实现程序</h3><p><img src="/img/typora-user-images/image-20230203201813755.png"></p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">module three (A, B, C, Y);<br>input A, B, C;<br>output Y;<br>assign Y = ~( ~(A&amp; (~(A&amp;B))) &amp; ~(B&amp;(~(A&amp;B))))|<br>       ~((~(A&amp;(~(A&amp;C)))) &amp; (~(C&amp;~(A&amp;C))));<br>endmodule;<br></code></pre></td></tr></table></figure><h3 id="4-用verilog-HDL语言编写下表电路的实现程序"><a href="#4-用verilog-HDL语言编写下表电路的实现程序" class="headerlink" title="4. 用verilog HDL语言编写下表电路的实现程序"></a>4. 用verilog HDL语言编写下表电路的实现程序</h3><p><img src="/img/typora-user-images/image-20230203201939929.png"></p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">module four(A, B, C, Y);<br>input A , B, C;<br>output Y;<br>assign Y = (~A)&amp;(~B)&amp;(~C) | A&amp;B&amp;C;<br>endmodule;<br></code></pre></td></tr></table></figure><h3 id="5-用verilog-HDL语言编写下表电路的实现程序"><a href="#5-用verilog-HDL语言编写下表电路的实现程序" class="headerlink" title="5. 用verilog HDL语言编写下表电路的实现程序"></a>5. 用verilog HDL语言编写下表电路的实现程序</h3><p><img src="/img/typora-user-images/image-20230203202207966.png"></p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">module five(I, Y);<br>input wire[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] I;<br>output wire[<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] Y;<br>assign Y[<span class="hljs-number">0</span>]=I[<span class="hljs-number">1</span>] | I[<span class="hljs-number">3</span>] | I[<span class="hljs-number">5</span>] | I[<span class="hljs-number">7</span>];<br>assign Y[<span class="hljs-number">1</span>]=I[<span class="hljs-number">2</span>] | I[<span class="hljs-number">3</span>] | I[<span class="hljs-number">6</span>] | I[<span class="hljs-number">7</span>];<br>assign Y[<span class="hljs-number">2</span>]=I[<span class="hljs-number">4</span>] | I[<span class="hljs-number">5</span>] | I[<span class="hljs-number">6</span>] | I[<span class="hljs-number">7</span>];<br>endmodule;<br></code></pre></td></tr></table></figure><h3 id="6-用verilog-HDL语言编写下表电路的实现程序"><a href="#6-用verilog-HDL语言编写下表电路的实现程序" class="headerlink" title="6. 用verilog HDL语言编写下表电路的实现程序"></a>6. 用verilog HDL语言编写下表电路的实现程序</h3><p><img src="/img/typora-user-images/image-20230203202238229.png"></p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">module six(A, B, Y);<br>input wire A, B;<br>output wire Y;<br>assgin Y = A&amp;(~B) | (~A)&amp;B ; <br>endmodule;<br></code></pre></td></tr></table></figure><h3 id="7-X是3位，Y是4位，用verilog-HDL语言编写Z-x3D-X-Y表达式的实现程序"><a href="#7-X是3位，Y是4位，用verilog-HDL语言编写Z-x3D-X-Y表达式的实现程序" class="headerlink" title="7. X是3位，Y是4位，用verilog HDL语言编写Z&#x3D;X+Y表达式的实现程序"></a>7. X是3位，Y是4位，用verilog HDL语言编写Z&#x3D;X+Y表达式的实现程序</h3><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">module seven(X, Y, Z);<br>input wire[<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] X;<br>input wire[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] Y;<br>output wire [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] Z;<br>assign Z = X + Y;<br>endmodule;<br></code></pre></td></tr></table></figure><h3 id="8-用verilog-HDL语言编写表达式的实现程序"><a href="#8-用verilog-HDL语言编写表达式的实现程序" class="headerlink" title="8. 用verilog HDL语言编写表达式的实现程序"></a>8. 用verilog HDL语言编写表达式<img src="file:///C:/Users/xini/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="img">的实现程序</h3><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">module eight(D, S, Y);<br>input wire[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] D;<br>input wire[<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] S;<br>output wire Y;<br>assign Y = D0&amp;(~S1)&amp;(~S0) | D1&amp;(~S1)&amp;S0 | D2&amp;S1&amp;(~S0) | D3&amp;S1&amp;S0;<br>endmodule;<br></code></pre></td></tr></table></figure><h3 id="9-用verilog-HDL语言编写4位比较器表达式的实现程序"><a href="#9-用verilog-HDL语言编写4位比较器表达式的实现程序" class="headerlink" title="9.用verilog HDL语言编写4位比较器表达式的实现程序"></a>9.用verilog HDL语言编写4位比较器表达式的实现程序</h3><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">module nine(D, S, Y);<br>input wire[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] D, S;<br>output wire[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] Y;<br>assign Y = (D&gt;S) ? D : S;<br>endmodule;<br></code></pre></td></tr></table></figure><h3 id="10-用verilog-HDL语言编写BCD编码器表达式的实现程序"><a href="#10-用verilog-HDL语言编写BCD编码器表达式的实现程序" class="headerlink" title="10.用verilog HDL语言编写BCD编码器表达式的实现程序"></a>10.用verilog HDL语言编写BCD编码器表达式的实现程序</h3><p><img src="/img/typora-user-images/image-20230203170458981.png" alt="image-20230203170458981"></p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">module BCD_code(I,Y);<br>input wire[<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] I;<br>output reg[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] Y;<br>always@ (I) <span class="hljs-keyword">begin</span><br><span class="hljs-keyword">case</span>(I)<br>  <span class="hljs-number">10</span><span class="hljs-symbol">&#x27;b0000000001</span>:Y=<span class="hljs-number">4</span><span class="hljs-symbol">&#x27;b0000</span>;<br>  <span class="hljs-number">10</span><span class="hljs-symbol">&#x27;b0000000010</span>:Y=<span class="hljs-number">4</span><span class="hljs-symbol">&#x27;b0001</span>;<br>  <span class="hljs-number">10</span><span class="hljs-symbol">&#x27;b0000000100</span>:Y=<span class="hljs-number">4</span><span class="hljs-symbol">&#x27;b0010</span>;<br>  <span class="hljs-number">10</span><span class="hljs-symbol">&#x27;b0000001000</span>:Y=<span class="hljs-number">4</span><span class="hljs-symbol">&#x27;b0011</span>;<br>  <span class="hljs-number">10</span><span class="hljs-symbol">&#x27;b0000010000</span>:Y=<span class="hljs-number">4</span><span class="hljs-symbol">&#x27;b0100</span>;<br>  <span class="hljs-number">10</span><span class="hljs-symbol">&#x27;b0000100000</span>:Y=<span class="hljs-number">4</span><span class="hljs-symbol">&#x27;b0101</span>;<br>  <span class="hljs-number">10</span><span class="hljs-symbol">&#x27;b0001000000</span>:Y=<span class="hljs-number">4</span><span class="hljs-symbol">&#x27;b0110</span>;<br>  <span class="hljs-number">10</span><span class="hljs-symbol">&#x27;b0010000000</span>:Y=<span class="hljs-number">4</span><span class="hljs-symbol">&#x27;b0111</span>;<br>  <span class="hljs-number">10</span><span class="hljs-symbol">&#x27;b0100000000</span>:Y=<span class="hljs-number">4</span><span class="hljs-symbol">&#x27;b1000</span>;<br>  <span class="hljs-number">10</span><span class="hljs-symbol">&#x27;b1000000000</span>:Y=<span class="hljs-number">4</span><span class="hljs-symbol">&#x27;b1001</span>;<br>  <span class="hljs-keyword">default</span> Y=Y;<br>endcase<br><span class="hljs-keyword">end</span><br>endmodule<br></code></pre></td></tr></table></figure><h3 id="11-用verilog-HDL语言编写2线-4线译码器的实现程序"><a href="#11-用verilog-HDL语言编写2线-4线译码器的实现程序" class="headerlink" title="11.用verilog HDL语言编写2线-4线译码器的实现程序"></a>11.用verilog HDL语言编写2线-4线译码器的实现程序</h3><p><img src="/img/typora-user-images/image-20230203171329081.png" alt="image-20230203171329081"></p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">module decoder(I,Y);<br>input wire[<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] I;<br>output reg [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] Y;<br>always@(I) <span class="hljs-keyword">begin</span><br><span class="hljs-keyword">case</span>(I)<br>    <span class="hljs-number">2</span><span class="hljs-symbol">&#x27;b00</span>:Y=<span class="hljs-number">4</span><span class="hljs-symbol">&#x27;b1110</span>;<br>    <span class="hljs-number">2</span><span class="hljs-symbol">&#x27;b01</span>:Y=<span class="hljs-number">4</span><span class="hljs-symbol">&#x27;b1101</span>;<br>    <span class="hljs-number">2</span><span class="hljs-symbol">&#x27;b10</span>:Y=<span class="hljs-number">4</span><span class="hljs-symbol">&#x27;b1011</span>;<br>    <span class="hljs-number">2</span><span class="hljs-symbol">&#x27;b11</span>:Y=<span class="hljs-number">4</span><span class="hljs-symbol">&#x27;b0111</span>;<br><span class="hljs-keyword">default</span>: Y=Y;<br>endcase<br><span class="hljs-keyword">end</span><br>endmodule<br></code></pre></td></tr></table></figure><h3 id="12-设计连续码流输入中检测“10010”的序列检测器。输入数字码流用xin表示，假定每个时钟周期会有输入连续加入，序列检测器连续检测输入码流，如果检测到输入码流中包含指定的“10010”，输出zout置位，否则zout保持低电平。"><a href="#12-设计连续码流输入中检测“10010”的序列检测器。输入数字码流用xin表示，假定每个时钟周期会有输入连续加入，序列检测器连续检测输入码流，如果检测到输入码流中包含指定的“10010”，输出zout置位，否则zout保持低电平。" class="headerlink" title="12.设计连续码流输入中检测“10010”的序列检测器。输入数字码流用xin表示，假定每个时钟周期会有输入连续加入，序列检测器连续检测输入码流，如果检测到输入码流中包含指定的“10010”，输出zout置位，否则zout保持低电平。"></a>12.设计连续码流输入中检测“10010”的序列检测器。输入数字码流用xin表示，假定每个时钟周期会有输入连续加入，序列检测器连续检测输入码流，如果检测到输入码流中包含指定的“10010”，输出zout置位，否则zout保持低电平。</h3><h4 id="（1）该序列检测器的状态转换图"><a href="#（1）该序列检测器的状态转换图" class="headerlink" title="（1）该序列检测器的状态转换图"></a>（1）该序列检测器的状态转换图</h4><p><img src="/img/typora-user-images/image-20230203175139583.png"></p><h4 id="（2）两段式编程"><a href="#（2）两段式编程" class="headerlink" title="（2）两段式编程"></a>（2）两段式编程</h4><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">module ZHANG(<br>    input wire clk, reset, <br>    input wire xin,<br>  output wire zout);<br>  reg [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] state_reg, state_next;<br><br>  localparamIDLE = <span class="hljs-number">3</span><span class="hljs-symbol">&#x27;d0</span>,   S0   = <span class="hljs-number">3</span><span class="hljs-symbol">&#x27;d1</span>,  <br>                S1   = <span class="hljs-number">3</span><span class="hljs-symbol">&#x27;d2</span>,    S2   = <span class="hljs-number">3</span><span class="hljs-symbol">&#x27;d3</span>,  <br>                S3   = <span class="hljs-number">3</span><span class="hljs-symbol">&#x27;d4</span>,    S4   = <span class="hljs-number">3</span><span class="hljs-symbol">&#x27;d5</span>,  <br>                S5   = <span class="hljs-number">3</span><span class="hljs-symbol">&#x27;d6</span>,    S6   = <span class="hljs-number">3</span><span class="hljs-symbol">&#x27;d7</span>; <br>assign  zout =(state_reg==S3 &amp;&amp; xin==<span class="hljs-number">1</span><span class="hljs-symbol">&#x27;b0</span>) ? <span class="hljs-number">1</span><span class="hljs-symbol">&#x27;b1</span> :<span class="hljs-number">1</span><span class="hljs-symbol">&#x27;b0</span>;<br> <br>always@(posedge clk, posedge reset)<br><span class="hljs-keyword">if</span>(reset)<br>            state_reg &lt;= IDLE;<br><span class="hljs-keyword">else</span><br>            state_reg &lt;= state_next;<br>always@(state_reg,xin) <span class="hljs-keyword">begin</span><br>   <span class="hljs-keyword">case</span>(state_reg)<br>        IDLE: <span class="hljs-keyword">if</span>(xin) state_next = S0;     <br>              <span class="hljs-keyword">else</span>    state_next = IDLE; <br>        S0:   <span class="hljs-keyword">if</span>(~xin)state_next = S1;     <br>              <span class="hljs-keyword">else</span>    state_next = S0; <br>        S1:   <span class="hljs-keyword">if</span>(~xin)state_next = S2;     <br>              <span class="hljs-keyword">else</span>    state_next = S5;<br>        S2:   <span class="hljs-keyword">if</span>(xin)state_next = S3;   <br>              <span class="hljs-keyword">else</span> state_next = S6; <br>        S3:  <span class="hljs-keyword">if</span>(~xin)state_next = S4;  <br>              <span class="hljs-keyword">else</span>  state_next = S0; <br>        S4:   <span class="hljs-keyword">if</span>(~xin)state_next = S2;   <br>              <span class="hljs-keyword">else</span>state_next = S0;  <br>        S5:  <span class="hljs-keyword">if</span>(xin)state_next = S0;  <br>              <span class="hljs-keyword">else</span>state_next = S1;  <br>        S6:   <span class="hljs-keyword">if</span>(xin)state_next = S5;  <br>              <span class="hljs-keyword">else</span> state_next = S6; <br>        <span class="hljs-keyword">default</span>: state_next = IDLE;<br>   endcase<br><span class="hljs-keyword">end</span><br>endmodule <br></code></pre></td></tr></table></figure><h3 id="13-储存器访问控制电路设计：存储器控制电路用于处理器和存储器芯片之间，接收处理器命令并产生相应控制信号。处理器命令包括mem、rw和burst构成输入信号。当处理器请求访问存储器时，mem置1，rw表示存储器访问类型，1表示读操作，0表示写操作。burst表示一种特殊的读操作。burst信号置1，连续执行四个读操作。-有限状态机有两个输出信号：oe（读使能）和we（写使能），连接到存储器芯片输入端。"><a href="#13-储存器访问控制电路设计：存储器控制电路用于处理器和存储器芯片之间，接收处理器命令并产生相应控制信号。处理器命令包括mem、rw和burst构成输入信号。当处理器请求访问存储器时，mem置1，rw表示存储器访问类型，1表示读操作，0表示写操作。burst表示一种特殊的读操作。burst信号置1，连续执行四个读操作。-有限状态机有两个输出信号：oe（读使能）和we（写使能），连接到存储器芯片输入端。" class="headerlink" title="13.储存器访问控制电路设计：存储器控制电路用于处理器和存储器芯片之间，接收处理器命令并产生相应控制信号。处理器命令包括mem、rw和burst构成输入信号。当处理器请求访问存储器时，mem置1，rw表示存储器访问类型，1表示读操作，0表示写操作。burst表示一种特殊的读操作。burst信号置1，连续执行四个读操作。 有限状态机有两个输出信号：oe（读使能）和we（写使能），连接到存储器芯片输入端。"></a>13.储存器访问控制电路设计：存储器控制电路用于处理器和存储器芯片之间，接收处理器命令并产生相应控制信号。处理器命令包括mem、rw和burst构成输入信号。当处理器请求访问存储器时，mem置1，rw表示存储器访问类型，1表示读操作，0表示写操作。burst表示一种特殊的读操作。burst信号置1，连续执行四个读操作。 有限状态机有两个输出信号：oe（读使能）和we（写使能），连接到存储器芯片输入端。</h3><h4 id="（1）状态转换图"><a href="#（1）状态转换图" class="headerlink" title="（1）状态转换图"></a>（1）状态转换图</h4><p><img src="/img/typora-user-images/image-20230203193741051.png"></p><h4 id="（2）两段式编程-1"><a href="#（2）两段式编程-1" class="headerlink" title="（2）两段式编程"></a>（2）两段式编程</h4><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">module mem_ctrl( <br>    input wire clk, reset,<br>    input wire mem, rw, bureset,<br>    output wire oe, we ); <br>localparam [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]IDLE = <span class="hljs-number">4</span><span class="hljs-symbol">&#x27;b0000</span>,        WRITE = <span class="hljs-number">4</span><span class="hljs-symbol">&#x27;b0100</span>,<br>           READ1 = <span class="hljs-number">4</span><span class="hljs-symbol">&#x27;b1000</span>,       READ2 = <span class="hljs-number">4</span><span class="hljs-symbol">&#x27;b1001</span>,<br>                READ3 = <span class="hljs-number">4</span><span class="hljs-symbol">&#x27;b1010</span>,       READ4 = <span class="hljs-number">4</span><span class="hljs-symbol">&#x27;b1011</span>; <br>reg [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]state_reg, state_next;<br>// State registers <br>always@(posedge clk， posedge reset) <br>    <span class="hljs-keyword">if</span>(reset)  state_reg &lt;= IDLE; <br>       <span class="hljs-keyword">else</span>     state_reg &lt;= state_next;<br>// <span class="hljs-keyword">Next</span>-state logic <br>always@(state_reg, mem, rw, bureset) <span class="hljs-keyword">begin</span> <br>   <span class="hljs-keyword">case</span>(state_reg)   <br>    IDLE: <span class="hljs-keyword">begin</span> <br>      <span class="hljs-keyword">if</span>(mem) <span class="hljs-keyword">begin</span> <br>    <span class="hljs-keyword">if</span>(rw)  state_next = READ1;  <br><span class="hljs-keyword">else</span> state_next = WRITE; <br>                <span class="hljs-keyword">end</span><br>     <span class="hljs-keyword">else</span>   state_next = IDLE; <br>     <span class="hljs-keyword">end</span> <br>   WRITE:   state_next = IDLE;<br>   READ1:   <span class="hljs-keyword">if</span>(bureset==<span class="hljs-number">1</span>’b1)  <br>                 state_next = READ2;<br>            <span class="hljs-keyword">else</span>  state_next = IDLE;<br>   READ2:   state_next = READ3;<br>   READ3:   state_next = READ4;<br>   READ4:   state_next = IDLE;<br>   <span class="hljs-keyword">Default</span>:    state_next = IDLE;<br>  endcase <br><span class="hljs-keyword">end</span><br>assign oe = state_reg[<span class="hljs-number">3</span>]; assign we = state_reg[<span class="hljs-number">2</span>];<br>endmodule<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/uncategorized/hello-world/"/>
    <url>/uncategorized/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
